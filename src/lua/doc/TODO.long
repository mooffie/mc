This document contains 'todo' items whose explanation is too long to fit
in the TODO file.


OVERRIDING COMMANDS (AKA "ACTIONS")
===================================

Currently, we're able to override keys:

    ui.Editbox.bind('f2', function(edt)
      if edt.data.read_only then
        alert('Sorry, you may not save this buffer')
      else
        return false
      end
    end)

We should also be able to override commands:

    ui.Editbox.bind_command('save', function(edt)
      if edt.data.read_only then
        alert('Sorry, you may not save this buffer')
      else
        return false
      end
    end)
    -- But we also need a way to inject code before/after the command.
    -- This need is demonstrated in 'snippets/fop_move_jump.lua'.

We can't yet easily do this because a widget's code is typically as
follows ("WIDGET" in this code stands for the actual widget name):

    cb_ret_t WIDGET_callback (Widget * w, widget_msg_t msg, int parm)
    {
      switch (msg)
      {
        case MSG_KEY:
        {
          long command;
          command = keybind_lookup_keymap_command (WIDGET_map, parm);

          if (command == CK_IgnoreKey) {
            ....
            return whatever;
          }
          else {
            return WIDGET_execute_cmd (w, command);
          }
        }

        case MSG_ACTION:
          return WIDGET_execute_cmd (w, parm);
      }
    }

    WIDGET_execute_cmd (WIDGET *w, long command)
    {
      switch (command)
      {
        case CK_MarkLeft:
          ...
        case ...:
          ...
      }
    }

In other words, instead of MSG_KEY sending a MSG_ACTION, thus letting us
trigger our magic at one entry point, each MSG_KEY is effectively
executing the command directly, leaving us no single entry point at which
to override the action.

There's a somewhat related bug in our Lua keymap handling. Say you press
"C-x f" (for the "follow link" feature, written in Lua). Afterwards MC
still thinks C-x is active so pressing "a" would trigger the "Active VFS
directories" dialog ("C-x a"). We don't have a way in Lua to reset MC's
keymap state. That's because MC doesn't really has such state: It's the
panel widget itself which remembers that C-x was pressed. MC's keymap
handling should be rewritten so that keymaps are handled by MC, not by
the widgets themselves. This will solve the above problem (of overriding
commands) as well.


THE EVENT LOOP
==============

MC's event loop can be replaced by that of GLib. Or we could let it watch
additional file descriptors. This can let us add support for watching for
filesystem events (i.e. Linux' inotify) like directory changes (ticket
#1756), socket programming etc. Refs:

  - https://en.wikipedia.org/wiki/Event_loop
  - select.c of LuaSocket


WIDGET CLASS IDS
================

Currently, widgets carry a 'const char *scripting_class_name' which tells
us their type. Also known as "class". We can very easily use an 'int'
instead of a string. The reason it hasn't been done yet is because it'd
better be done in the "interesting" way explained below, instead of the
"classic" way. This "interesting" way, however, may cause ignorant
reviewers of the code to complain -- which is why it's been postponed.

First, let's examine the "classic" way:

    typedef enum {
      WGT_BUTTON,
      WGT_LISTBOX,
      WGT_CHECKBOX,
      WGT_MENU,
      ...
    } widget_class_t;

However, there's a problem here: where would we put the definitions for
widgets created outside the lib/widget folder, as WGT_EDITBOX, WGT_PANEL,
WGT_VIEWER? While we could define them as

    #define WGT_PANEL  (WGT_LAST + 1)

this has a problem because then we'd have to keep track of how much to
add to WGT_LAST so different widgets classes won't accidentally share the
same ID.

A better solution is to use the following, "interesting" way:

In widget/button.h:

    G_DEFINE_QUARK (WButton, button);

In widget/button.c:

    widget_init (..., button_quark());

and likewise for all the other widgets (we may want to create our own
macro to replace G_DEFINE_QUARK, to ensure the generated function is
'inline' and/or to have it accept just one argument).


MISC
====

- luaposix ( /usr/share/lua/5.1/posix.lua ) does some arithmetic with timestamps.
  Perhaps there's some idea there that can help us get rid of timer.c's division?

- MoonScript: does it produce, like CoffeScript, a file with mapping between
  input and output line numbers? If so, we could use it to make traceback
  messages meaningful.
